--6. task
--What operations do the following functions perform: film_in_stock, film_not_in_stock, inventory_in_stock, get_customer_balance, 
--inventory_held_by_customer, rewards_report, last_day? You can find these functions in dvd_rental database.
--SELECT * FROM public.films_in_stock_by_title('chamber');
--Answer: It checks if the movie is in stock, or not. You do not need to write the full name of the movie, it searches the words if there is any film name, which contains the words.

--SELECT * FROM public.film_not_in_stock(1, 2);
--Answer: It checks by film_id and store_id if the movie is in not available in the store. 
--It gets you that how many pieces are not in the store by.

--SELECT public.inventory_in_stock(15);
--AnswerThis functiion checks if the inventory_id is in or not.

--SELECT public.get_customer_balance(1, '2017-01-21 00:00:00+00');
--Answer: This function checks for the customers' balance, late payments, rental fees and after it calculates the customers' current balance.

--SELECT public.inventory_held_by_customer(42);
--Answer: This function checks the customers' id, and checks the rental table if the customer is holding the movie or he took it back. It checks its return_date if it is null.

--SELECT * FROM public.rewards_report(5, 50.00);
--It checks if the customer met a requirement to get a reward. It checks a minimum number of rentals, and a minimum spending in the last 3 months.

--SELECT public.last_day('2017-03-15 00:00:00+00');
--Answer: It gets you the last date of the month. It needs to put in the timestamp and the timezone.

--Why does ‘rewards_report’ function return 0 rows? Correct and recreate the function, so that it's able to return rows properly.
--Because it checks for the last 3 months, but there is no rental after 2017, so i rewrote the 3 months to 90 months. 

--Is there any function that can potentially be removed from the dvd_rental codebase? If so, which one and why?
--I think it is the group_concat(text) function, because it is not relevant in this dvdrental database.

--* The ‘get_customer_balance’ function describes the business requirements for calculating the client balance. 
--Unfortunately, not all of them are implemented in this function. Try to change function using the requirements from the comments.
DROP FUNCTION public.get_customer_balance(int4, timestamptz);

CREATE OR REPLACE FUNCTION public.get_customer_balance(p_customer_id integer, p_effective_date timestamp with time zone)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
       --#OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       --#THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       --#   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       --#   
       --#   
       --#   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED
DECLARE
    v_rentfees DECIMAL(5,2); --#FEES PAID TO RENT THE VIDEOS INITIALLY
    v_overfees INTEGER;      --#LATE FEES FOR PRIOR RENTALS
    v_payments DECIMAL(5,2); --#SUM OF PAYMENTS MADE PREVIOUSLY
	v_replacement_fees DECIMAL(5,2); --3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
	v_late_days INTEGER; 	 --2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
BEGIN
    SELECT COALESCE(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film
    JOIN inventory ON film.film_id = inventory.film_id
    JOIN rental ON inventory.inventory_id = rental.inventory_id
    WHERE rental.customer_id = p_customer_id
      AND rental.rental_date <= p_effective_date
      AND rental.return_date IS NOT NULL;

    SELECT COALESCE(SUM(
         CASE 
             WHEN rental.return_date > (rental.rental_date + film.rental_duration * INTERVAL '1 day')
             THEN DATE(rental.return_date) - DATE(rental.rental_date + film.rental_duration * INTERVAL '1 day')
             ELSE 0
         END
        ), 0) INTO v_overfees
    FROM rental
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    WHERE rental.customer_id = p_customer_id
      AND rental.rental_date <= p_effective_date
      AND rental.return_date IS NOT NULL;

    SELECT COALESCE(SUM(payment.amount),0) INTO v_payments
    FROM payment
    WHERE payment.payment_date <= p_effective_date
    AND payment.customer_id = p_customer_id;

    SELECT COALESCE(SUM(
                CASE 
                    WHEN (rental.return_date - rental.rental_date) > (film.rental_duration * 2 * '1 day'::interval)
                    THEN film.replacement_cost
                    ELSE 0
                END
            ), 0) INTO v_replacement_fees
    FROM rental
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    WHERE rental.customer_id = p_customer_id
      AND rental.rental_date <= p_effective_date
      AND rental.return_date IS NOT NULL;

    RETURN v_rentfees + v_overfees + v_replacement_fees - v_payments;
END
$function$
;

--select * from public.get_customer_balance(10, '2022-01-21 00:00:00+00');

--* How do ‘group_concat’ and ‘_group_concat’ functions work? (database creation script might help) Where are they used?
--_group_concat function takes 2 texts, checks if they are null values, and returns the concetanated result.
--group_concate: It groups the data by specific field, and then concetanates the values into a single string for each group.

-- What does ‘last_updated’ function do? Where is it used?
--It's a trigger function, it automatically updates the last_update column if a change is made on the table.

--* What is tmpSQL variable for in ‘rewards_report’ function? Can this function be recreated without EXECUTE statement and dynamic SQL? Why?
--It stores dynamic sql queries which is executed using the EXECUTE statement.